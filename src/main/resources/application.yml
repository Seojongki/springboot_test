server:
  port: 8070

application:
  version: AppVersion 1.0.0
  title: thejoeun company

spring:
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 329640614505-ghojacmncovs2ncb41l3obppcr557d1k.apps.googleusercontent.com
            client-secret: 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
            scope:
              - email
              - profile
    user:
      name: user
      password: 1234
  thymeleaf:
    cache: false
  sql:
    init:
      mode: always  # default 상태는 never
        # always : embeded db가 아닌 외부 db 사용시 spring boot를 실행할때 마다 data.sql, schema.sql, import.sql을 항상 실행
        # never : data.sql, schema.sql, import.sql을 실행하지 않음
        # data.sql, schema.sql : log에 보이지 않음
      # import.sql : log에 보여짐
      # once
      encoding: utf-8
  datasource:
    #    generate-unique-name: false
    #    initialization-mode: always

    ## h2 데이터 베이스
    #    url: jdbc:h2:mem:testdb     # H2 Embeded Memory   // chrom에서 "http://localhost:8070/h2-console" 으로 접속하여 데이터 베이스를 볼수 있다
    #    driver-class-name: org.h2.Driver # H2 connect driver
    #    username: sa
    #    password:

    #  url: jdbc:mysql://localhost:3306/mydb?&zeroDateTimeBehavior=convertToNull&useUnicode=true&characterEncoding=UTF-8&useSSL=false      # mysql
    #  driver-class-name: com.mysql.cj.jdbc.Driver
    #    username: root
    #    password: 1234

    ##mariadb 데이터 베이스
    url: jdbc:mariadb://localhost:3306/mydb5         # mariadb
    driver-class-name: org.mariadb.jdbc.Driver
    username: root
    password: 1234

  ## orcle 데이터 베이스
  #    url: jdbc:oracle:thin:@localhost:1521:test         # oracle
  #    driver-class-name: oracle.jdbc.OracleDriver
  #    username: SYSTEM
  #    password: test1234
  h2:
    console:
      path: /h2-console
      enabled: true
  jpa:
    show-sql: true # java코드로 짠 sql을
    defer-datasource-initialization: true # data.sql 사용을 위해서 필수적으로 등록
    properties:
      hibernate:
        format_sql: true  # sql문 pretty하게 보여줌
        use_sql_comments: true   # 사용중인 sql의 commnet를 보여줌  예)
    generate-ddl: false # 굉장히 중요함, 데이터가 사라질수 있음  // true, false  //값이 없다면 기본값은 false
    # 테이블을 생성함 create;  ddl(drop, create), dml(CRUD)
    hibernate:
      ddl-auto: create  # ddl(create, drop)  // 위 generate-ddl 과 같이 설정할 때는 hibernate가 우선순위를 가짐; generate-ddl 무시됨
        # create: spring boot를 처음 실행시에 Entity로 된 클래스 및 테이블을 무조건 drop하고 create 함
        # entityScan / PersistContext가  entityScan을 관리
        #create-drop : spring boot를 처음 실행시에 Entity로 된 클래스 및 테이블을 drop하고 spring boot 종료시에 다시 drop함
        #update : 연결된 db schema와 자바 entity와 비교하여 다른게 있으면 다른것만 ddl 코드를 생성 (drop은 실행되지 않음)
      #validate : ddl 구문을 만들지 않고, 연결된 db schema와 자바 entity와 비교하여 다른게 있으면 오류코드만 보여줌
      #none : ddl구문을 만들지 않음, 개발단계에서 create  --> 운영은 none

mvc:
  view:
    prefix: /WEB-INF/view/
    suffix: .jsp
devtools:
  livereload:
    enabled: true


logging:
  level:
    org:
      hibernate:   # info, trace
        orm:
          jdbc:
            bind: trace     #hibernate에서 ? 값 보기
        SQL: debug
        #        type: trace
        type:
          decriptor:
            sql: trace
#    root: trace

jwt:
  issuer: jwt1@abc.com
  secret_key: 1234

